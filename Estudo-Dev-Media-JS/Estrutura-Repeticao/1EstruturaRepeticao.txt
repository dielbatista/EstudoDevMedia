1- O que SÃ£o estruturas de repeticao -!
/*
Sao Blocos de CÃ³digo que podem ser executadas diversas vezes
*/

2 - Para quÃª sÃ£o uteis? -!
/*
 Reaproveitar cÃ³digo, Evitando cÃ³digo duplicado

 Executar um bloco de cÃ³digo n vezes na aplicaÃ§Ã£o, mesmo sem saber quantas vezes serÃ£o.
*/


    ğŸ”¹ 1. for

Uso: Quando vocÃª sabe quantas vezes deseja repetir.

for (let i = 0; i < 5; i++) {
  console.log(i); // Imprime de 0 a 4
}

 Como funciona?

    i = 0 â†’ InicializaÃ§Ã£o
    i < 5 â†’ CondiÃ§Ã£o (enquanto for verdadeira, continua)
    i++ â†’ Incremento (soma 1 a cada repetiÃ§Ã£o)

    ğŸ”¹ 1. for com break e continue
âœ… break â†’ Sai do loop completamente quando a condiÃ§Ã£o for atendida.

for (let i = 0; i < 5; i++) {
  if (i === 3) break; // Para quando i for 3
  console.log(i);
}
// SaÃ­da: 0, 1, 2

âœ… continue â†’ Pula para a prÃ³xima iteraÃ§Ã£o sem executar o restante do cÃ³digo no loop.

for (let i = 0; i < 5; i++) {
  if (i === 3) continue; // Pula o 3
  console.log(i);
}
// SaÃ­da: 0, 1, 2, 4

    ğŸ”¹ 2. while

Uso: Quando vocÃª quer repetir enquanto uma condiÃ§Ã£o for verdadeira.

let i = 0;
while (i < 5) {
  console.log(i);
  i++;
}

ğŸ“Œ Como funciona?

    Enquanto a condiÃ§Ã£o for verdadeira, o loop continua.
    Pode ser perigoso se a condiÃ§Ã£o nunca for falsa (loop infinito).

    2. while com break e continue
âœ… break

let i = 0;
while (i < 5) {
  if (i === 3) break;
  console.log(i);
  i++;
}
// SaÃ­da: 0, 1, 2

âœ… continue

let j = 0;
while (j < 5) {
  j++;
  if (j === 3) continue;
  console.log(j);
}
// SaÃ­da: 1, 2, 4, 5

    ğŸ”¹ 3. do...while

    Uso: Igual ao while, mas garante pelo menos uma execuÃ§Ã£o.

    let i = 0;
do {
  console.log(i);
  i++;
} while (i < 5);

ğŸ“Œ Como funciona?

    Executa o bloco pelo menos uma vez, depois verifica a condiÃ§Ã£o.

    ğŸ”¹ 3. do...while com break e continue
âœ… break

let k = 0;
do {
  if (k === 3) break;
  console.log(k);
  k++;
} while (k < 5);
// SaÃ­da: 0, 1, 2

âœ… continue

let l = 0;
do {
  l++;
  if (l === 3) continue;
  console.log(l);
} while (l < 5);
// SaÃ­da: 1, 2, 4, 5

     4. for...of

Uso: Para percorrer arrays e strings.

const numeros = [10, 20, 30];
for (const numero of numeros) {
  console.log(numero);
}

ğŸ“Œ Como funciona?

    A cada repetiÃ§Ã£o, pega um elemento do array e coloca na variÃ¡vel (numero).

    ğŸ”¹ 4. for...of com break e continue
âœ… break

const numeros = [10, 20, 30, 40, 50];
for (const numero of numeros) {
  if (numero === 30) break;
  console.log(numero);
}
// SaÃ­da: 10, 20

âœ… continue

for (const numero of numeros) {
  if (numero === 30) continue;
  console.log(numero);
}
// SaÃ­da: 10, 20, 40, 50

    ğŸ”¹ 5. for...in

Uso: Para percorrer as propriedades de um objeto.

const pessoa = { nome: "Ana", idade: 25 };
for (const chave in pessoa) {
  console.log(`${chave}: ${pessoa[chave]}`);
}

ğŸ“Œ Como funciona?

    A cada repetiÃ§Ã£o, a variÃ¡vel (chave) recebe o nome de uma propriedade do objeto.

    ğŸ”¹ 5. for...in com break e continue
âœ… break

const pessoa = { nome: "Ana", idade: 25, cidade: "SÃ£o Paulo" };
for (const chave in pessoa) {
  if (chave === "idade") break;
  console.log(`${chave}: ${pessoa[chave]}`);
}
// SaÃ­da: nome: Ana

âœ… continue

for (const chave in pessoa) {
  if (chave === "idade") continue;
  console.log(`${chave}: ${pessoa[chave]}`);
}
// SaÃ­da: nome: Ana, cidade: SÃ£o Paulo